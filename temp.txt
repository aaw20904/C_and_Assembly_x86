Can you write a procedure of CIC filter in NASM assembly for x86?
global variables description.
comb1Ptr, comb2Ptr : pointers to "circular" arrays (16 bytes).
acc1, acc2; accumulators.
local variable: resultValue.
Parameters (C style passing through stack) are: inputP (pointer to input data block), outputP (pointer to output data block), lenght (length of block).
Place inputP into ESI, outputP into EDI. 
1) Allocate a local variable. Use EBP as a base pointer, save origial content before.
2) Load an input sample by ESI.During execution, you can increase this pointer each iteration of the loop.
3)Add   input value to the acc1. Save result in acc1.Then  add acc1 to acc2, save result in acc2.
4)comb1. Read data by a pointer comb1Ptr. Subtract  acc2-[comb1Ptr], save a result by the pointer comb1Ptr, and in "resultValue".
5) Increment comb1Ptr (by 4) and checking: has the value acheived array`s border? I mean pointer should be less that (start_address+64), 
in case of 16cells of comb delay line-array.When a pointer exceed border - wrap it to the zero cell`s address.
6). Subtract resultValue-[comb2Ptr].Save 
 a result by comb2Ptr pointer.
7)Move a result in resultValue.
8)Increment comb2Ptr by 4 (bytes)
9)Checking - is comb2Ptr more that last cell`s address?When yes - wrap the pointer around to the first cell address.
10)Save a filter`s output sample by EDI.
11)use for iterating LOOP instruction , place "lenght" input parameter in ECX, increment ESI, EDI after each iteration
12)Restore EBP and ESP (because of local variable "resultValue").
Have you any questions for me?

section .text
global cic_filter

; Function prototype:
; void cic_filter(int32_t *inputP, int32_t *outputP, int length);

%define inputP       [ebp + 8]
%define outputP      [ebp + 12]
%define length       [ebp + 16]
%define resultValue  [ebp - 4]

cic_filter:
    push    ebp
    mov     ebp, esp
    sub     esp, 4                      ; reserve space for resultValue

    push    esi
    push    edi
    push    ebx

    ; Load parameters
    mov     esi, inputP                ; input pointer
    mov     edi, outputP               ; output pointer
    mov     ecx, length                ; loop counter

    ; Load persistent state
    mov     eax, [acc1]                ; EAX = acc1
    mov     ebx, [acc2]                ; EBX = acc2
    mov     edx, [comb1Ptr]            ; EDX = comb1Ptr
    mov     esi_c2, [comb2Ptr]         ; use ESI_C2 as comb2Ptr

    ; Load base addresses and calculate borders
    lea     ebp1, [comb1Array]
    mov     comb1Border, ebp1
    add     comb1Border, 64

    lea     ebp2, [comb2Array]
    mov     comb2Border, ebp2
    add     comb2Border, 64

.loop:
    ; 1. Load input sample (signed 32-bit)
    mov     edx_in, [esi]
    add     eax, edx_in                ; acc1 += input
    mov     [acc1], eax

    add     ebx, eax                   ; acc2 += acc1
    mov     [acc2], ebx

    ; 2. Comb stage 1
    mov     edx_val, [edx]             ; old value from comb1Ptr
    sub     ebx, edx_val               ; result = acc2 - old
    mov     [edx], ebx                 ; store acc2 to comb1Ptr
    mov     resultValue, ebx           ; save intermediate result

    ; 3. Increment comb1Ptr and check wrap
    add     edx, 4
    cmp     edx, comb1Border
    jb      .skip_wrap1
    lea     edx, [comb1Array]
.skip_wrap1:

    ; 4. Comb stage 2
    mov     eax_tmp, [esi_c2]          ; old value from comb2Ptr
    mov     ebx_tmp, resultValue
    sub     ebx_tmp, eax_tmp           ; result = resultValue - old
    mov     [esi_c2], resultValue      ; store resultValue to comb2Ptr
    mov     resultValue, ebx_tmp       ; save final result

    ; 5. Increment comb2Ptr and check wrap
    add     esi_c2, 4
    cmp     esi_c2, comb2Border
    jb      .skip_wrap2
    lea     esi_c2, [comb2Array]
.skip_wrap2:

    ; 6. Store result to output
    mov     eax, resultValue
    mov     [edi], eax

    ; 7. Advance input/output pointers
    add     esi, 4
    add     edi, 4

    loop    .loop

    ; Save final state
    mov     [acc1], eax
    mov     [acc2], ebx
    mov     [comb1Ptr], edx
    mov     [comb2Ptr], esi_c2

    ; Restore
    pop     ebx
    pop     edi
    pop     esi
    mov     esp, ebp
    pop     ebp
    ret

