;to compile - use the folowing command:
  ; nasm -f win32 dbg.asm -o dbg.obj
  ;to link with MyLink - use the following command:
  ;   GoLink /entry main /console dbg.obj msvcrt.dll kernel32.dll
  %include "utils.asm"


section .data
     ; AES Key (must be 128 bits or 16 bytes)
     align 16

     fmt_int db "%d",10,0
     ;-----integer----coefs----
     b0_01_coef dd 241  ;64/61   0.953327
     b1_01_coef dd -241
     a1_01_coef dd +226  ;64/58   0.906836
     b0_01_prod dd 0
     b1_01_prod dd 0
     a1_01_prod dd 0
     out_prev resb 4
     in_prev resb 4
     ;--end-of_integer-coefs
    filter_in resd 1025
    filter_out resd 1025


section .text
  global main
  extern printf, scanf,puts, ExitProcess
main:
  mov eax, 0x0000000f
  mov [filter_in], eax ;impulse

  mov eax, 512 ;length
  push eax
  mov eax, filter_out ;address 
  push eax
  mov eax, filter_in
  push eax
  call _integerBandpass
  add esp, 12

  mov esi, filter_out
  mov ecx, 256
  
x12345:
  push ecx
  push esi
  push dword [esi]
  push fmt_int
  call printf
  add esp, 8
  pop esi
  pop ecx
  add esi, 4
  loop x12345

finally:
  mov eax, 0
  push eax
  call ExitProcess
  ret

_integerBandpass:
  ;---C style call conversion
  %define x1Src [ebp+8]
  %define x1Dest [ebp+12]
  %define x1Length [ebp+16]
  %define resultValue [ebp-4]
  %define array_size 256
   ;[ebp] - return address
  push ebp
  mov ebp, esp
  sub esp, 4 ;allocate local variable
  ;load esi,edi,ecx. !!!! ECX reserved for loop
  mov esi, x1Src
  mov edi, x1Dest
  mov ecx, x1Length
mainloop001:
  ;1)load input n and multiply by b0
  mov eax, [esi]   ;load x[n] (current sample)
  sal eax, 6       ;normalize << 8
  imul dword [b0_01_coef]    ; edx:eax = b0*x[n],  (eax is low, edx is high)
  mov [b0_01_prod], eax ;save low32bits product

  ;2)load input n-1 and multiply by b1
  mov eax, [in_prev] 
  imul dword [b1_01_coef]    ; edx:eax = b1*x[n-1],  (eax is low, edx is high)
  mov [b1_01_prod], eax     ;save product

  ;3)load output y [n-1] and multiply by a1
  mov eax, [out_prev]
  imul dword [a1_01_coef]    ; edx:eax = a1*y[n-1],  (eax is low, edx is high)
  mov [a1_01_prod], eax           ;save result
  ;4) b0*x[n] + b1*x[n]-a1*y[n-1]
  mov eax, [b0_01_prod]
  add eax, [b1_01_prod]
  sub eax, [a1_01_prod]
  ;5)store current result as previous output sample y[n-1] 
  mov [out_prev], eax
  ;6) store input value as previous  input sample x[n-1]
  mov eax , [esi]
  mov [in_prev], eax 
  ;7)  DEBUG load result in EAX
  mov eax, [out_prev]
  sar eax, 6 ;normalize   >> 8
  mov [edi], eax
  ;8) increment pointers
  add esi, 4
  add edi, 4
  dec ecx
  jnz mainloop001
  ;--restore stack
    add esp, 4
    pop ebp
 ret
